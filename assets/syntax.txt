_seps: "[]()\\:,.¬∑‚®Ø-‚Üí{}<>=!+-*/%^&|"

28 arity = [.._seps!:"fun" ":[arity]" .$:"arg"]
27 seq_left = {
  arity:"arity"
  no_constr:"no_constr"
  var
  val
}
26 no_constr = [.._seps!:"fun" ":!{}"]
25 compute_unop = ["compute::" .._seps!:"fun" "(" .w? .._seps!:"arg" .w? ")"]
24 compute_binop = ["compute::" .._seps!:"fun" "(" .w? .._seps!:"left"
                    .w? "," .w? .._seps!:"right" .w? ")"]
23 knowledge = [top_expr:"left" {"<=>>":"eqveval" "<=>":"eqv" "=>":"red"}
                top_expr:"right"]
22 top_expr = {
  [.w? raw_expr .w?]
  [.w? expr .w?]
}
21 alg3 = .s!([.w? "^":"^" .w?] [?[{"-":"neg" "!":"not" "¬¨":"not"} !.w! !.$]
          expr:"alg_item"])
20 alg2 = .s!([.w? {"*":"*" "/":"/" "%":"%" "&":"&" "‚àß":"&"} .w?] alg3:"alg")
19 alg1 = .s!([.w? {"++":"++" "+":"+" "-":"-" "|":"|" "‚à®":"|"} .w?] alg2:"alg")
18 alg = ["(" .w? alg_inner .w? ")"]
17 alg_inner = .s!([.w? {"<=":"<=" "<":"<" "==":"=" "=":"=" ">=":">="
          ">":">"} .w!] alg1:"alg")
16 rapp = ["(" .w? {
  ":":"rty"
  "<=":"rle"
  "<":"rlt"
  "=":"eq"
  ">=":"rge"
  ">":"rgt"
  "*":"mul"
  "/":"rdiv"
  "+":"add"
  "-":"rsub"
  "^":"rpow"
} .w! expr:"arg" .w? ")"]
15 list = ["[" .w? .s?([.w? "," .w?] {raw_expr:"item" expr:"item"}) .w? "]"]
14 tup_items_expr = tup_items:"tup"
13 tup_items = [.s!([.w? "," .w?] {raw_expr:"item" expr:"item"})]
12 tup_path_expr = tup_path:"tup"
11 tup_path = [.s!([.w? {"x" "‚®Ø"} .w?] expr:"item") .w? {"->" "‚Üí"} .w? expr:"item"]
10 val = {
  [.._seps!:"poi" ".poi"]
  [?"\\" {
    ["true":"bool" !.$]
    ["false":!"bool" !.$]
    [.$_:"num_pi" .w? {"pi" "œÄ"}]
    [.$_:"num_tau" .w? {"tau" "œÑ"}]
    [.$_:"num_eps" {[.w! "eps"] [.w? "Œµ"]}]
    [.$_:"num_imag3" {[.w? "imag3"] [.w? "ùê¢‚ÇÉ"]}]
    [.$_:"num_imag2" {[.w? "imag2"] [.w? "ùê¢‚ÇÇ"]}]
    [.$_:"num_imag" {[.w? "imag"] [.w? "ùê¢"]}]
    .$_:"num"
  }]
  ["\\" .._seps!:"ret_var"]
}
9 var = [!.$ .._seps!:"var"]
8 path_right = [.w? "[" .w? {tup_path_expr expr} .w? "]"]
7 app_right = [.w? "(" .w? {tup_items_expr expr} .w? ")"]
6 comp_right = [.w? {"." "¬∑"} .w? expr]
5 typ_right = [.w? ":" .w? expr]
4 constr_right = [.w? "{" .w? {tup_items_expr expr} .w? "}"]
3 seq = [{
  rapp:"rapp"
  ["(" .w? tup_items_expr:"left" .w? ")"]
  alg:"alg"
  list:"list"
  seq_left:"left"
} .r!({
  path_right:"path"
  app_right:"app"
  constr_right:"constr"
  comp_right:"comp"
  typ_right:"typ"
})]
2 expr = {
  seq:"seq"
  rapp:"rapp"
  ["(" .w? tup_items_expr .w? ")"]
  alg:"alg"
  list:"list"
  compute_binop:"compute_binop"
  compute_unop:"compute_unop"
  arity:"arity"
  no_constr:"no_constr"
  val
  var
}
1 raw_expr = alg_inner:"alg"
0 doc = {knowledge:"knowledge" top_expr:"expr"}
